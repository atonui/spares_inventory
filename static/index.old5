                <div x-show="filteredInventory.length === 0" style="padding: 2rem; text-align: center; color: #666;">
                    No inventory found matching your search criteria.
                </div>
            </div>

            <!-- ALL MODALS INSIDE THE ALPINE SCOPE -->
            
            <!-- Add Stock Modal -->
            <div x-show="showAddModal" class="modal" @click.outside="showAddModal = false">
                <div class="modal-content">
                    <h3>Add Stock</h3>
                    <form @submit.prevent="addStock()">
                        <div class="form-group">
                            <label>Part</label>
                            <select x-model="addForm.part_id" required>
                                <option value="">Select Part</option>
                                <template x-for="part in parts" :key="part.id">
                                    <option :value="part.id" x-text="part.part_number + ' - ' + part.description"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Store</label>
                            <select x-model="addForm.store_id" required>
                                <option value="">Select Store</option>
                                <template x-for="store in editableStores" :key="store.id">
                                    <option :value="store.id" x-text="store.name"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Quantity</label>
                            <input type="number" x-model="addForm.quantity" min="1" required>
                        </div>
                        <div class="form-group">
                            <label>Work Order (leave blank for original stock)</label>
                            <input type="text" x-model="addForm.work_order_number" placeholder="WO-2024-001">
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showAddModal = false">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="addingStock">
                                <span x-show="!addingStock">Add Stock</span>
                                <span x-show="addingStock">Adding...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Edit Stock Modal -->
            <div x-show="showEditModal" class="modal" @click.outside="showEditModal = false">
                <div class="modal-content">
                    <h3>Edit Stock Quantity</h3>
                    <form @submit.prevent="updateStock()">
                        <div class="form-group">
                            <label>New Quantity</label>
                            <input type="number" x-model="editForm.new_quantity" min="0" required>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showEditModal = false">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading">Update</span>
                                <span x-show="loading">Updating...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Transfer Stock Modal -->
            <div x-show="showTransferModal" class="modal" @click.outside="showTransferModal = false">
                <div class="modal-content">
                    <h3>Transfer Stock</h3>
                    <form @submit.prevent="transferStock()">
                        <div class="form-group">
                            <label>Destination Store</label>
                            <select x-model="transferForm.to_store_id" required>
                                <option value="">Select Store</option>
                                <template x-for="store in editableStores" :key="store.id">
                                    <option :value="store.id" x-text="store.name"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Quantity to Transfer</label>
                            <input type="number" x-model="transferForm.quantity" min="1" required>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showTransferModal = false">Cancel</button>
                            <button type="submit" class="btn btn-warning" :disabled="loading">
                                <span x-show="!loading">Transfer</span>
                                <span x-show="loading">Transferring...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- User Management Modal -->
            <div x-show="showUserModal" class="modal" @click.outside="showUserModal = false">
                <div class="modal-content">
                    <h3 x-text="editingUser ? 'Edit User' : 'Create New User'"></h3>
                    <form @submit.prevent="editingUser ? updateUser() : createUser()">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" x-model="userForm.email" required :disabled="!!editingUser">
                        </div>
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" x-model="userForm.name" required>
                        </div>
                        <div class="form-group">
                            <label x-text="editingUser ? 'New Password (leave blank to keep current)' : 'Password'"></label>
                            <input type="password" x-model="userForm.password" :required="!editingUser">
                        </div>
                        <div class="form-group">
                            <label>Role</label>
                            <select x-model="userForm.role" required>
                                <option value="engineer">Engineer</option>
                                <option value="admin">Admin</option>
                                <option value="manager">Manager</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Territory</label>
                            <input type="text" x-model="userForm.territory" placeholder="Optional">
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showUserModal = false; editingUser = null;">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading" x-text="editingUser ? 'Update User' : 'Create User'"></span>
                                <span x-show="loading" x-text="editingUser ? 'Updating...' : 'Creating...'"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

        </div>
        <!-- End of Main App Container -->
        
    </div>
    <!-- End of Alpine.js Scope -->

    <script>
        function inventoryApp() {
            return {
                // Authentication state
                isAuthenticated: false,
                currentUser: null,
                token: null,
                
                // UI state
                loading: false,
                addingStock: false,
                error: '',
                successMessage: '',
                
                // Forms
                loginForm: {
                    email: 'john@company.com',
                    password: 'password123'
                },
                
                addForm: {
                    part_id: '',
                    store_id: '',
                    quantity: '',
                    work_order_number: ''
                },
                
                editForm: {
                    inventory_id: '',
                    new_quantity: ''
                },
                
                transferForm: {
                    inventory_id: '',
                    to_store_id: '',
                    quantity: ''
                },
                
                userForm: {
                    email: '',
                    name: '',
                    password: '',
                    role: 'engineer',
                    territory: ''
                },
                
                // Search and filters
                searchTerm: '',
                storeFilter: '',
                showAddModal: false,
                showEditModal: false,
                showTransferModal: false,
                showUserModal: false,
                showUsersPanel: false,
                editingUser: null,
                
                // Data
                stats: {},
                stores: [],
                parts: [],
                inventory: [],
                workOrders: [],
                users: [],
                filteredInventory: [],

                // API Base URL
                apiUrl: '/api',

                // Initialize
                async checkAuth() {
                    this.token = localStorage.getItem('token');
                    if (this.token) {
                        try {
                            await this.getCurrentUser();
                            this.isAuthenticated = true;
                            await this.loadAllData();
                        } catch (error) {
                            localStorage.removeItem('token');
                            this.token = null;
                        }
                    }
                },

                // Authentication
                async login() {
                    this.loading = true;
                    this.error = '';
                    
                    try {
                        const response = await fetch(`${this.apiUrl}/auth/login`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(this.loginForm)
                        });
                        
                        if (!response.ok) {
                            throw new Error('Invalid credentials');
                        }
                        
                        const data = await response.json();
                        this.token = data.access_token;
                        this.currentUser = data.user;
                        localStorage.setItem('token', this.token);
                        this.isAuthenticated = true;
                        
                        await this.loadAllData();
                        
                    } catch (error) {
                        this.error = error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async getCurrentUser() {
                    const response = await fetch(`${this.apiUrl}/me`, {
                        headers: {
                            'Authorization': `Bearer ${this.token}`
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Authentication failed');
                    }
                    
                    this.currentUser = await response.json();
                },

                logout() {
                    localStorage.removeItem('token');
                    this.token = null;
                    this.currentUser = null;
                    this.isAuthenticated = false;
                },

                // Data loading
                async loadAllData() {
                    this.loading = true;
                    try {
                        const promises = [
                            this.loadStats(),
                            this.loadStores(),
                            this.loadParts(),
                            this.loadInventory()
                        ];
                        
                        // Load additional data for admins
                        if (this.currentUser?.role === 'admin') {
                            promises.push(this.loadUsers());
                        }
                        
                        await Promise.all(promises);
                    } catch (error) {
                        this.error = 'Failed to load data: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async apiCall(endpoint, options = {}) {
                    const response = await fetch(`${this.apiUrl}${endpoint}`, {
                        headers: {
                            'Authorization': `Bearer ${this.token}`,
                            'Content-Type': 'application/json',
                            ...options.headers
                        },
                        ...options
                    });
                    
                    if (!response.ok) {
                        throw new Error(`API error: ${response.status}`);
                    }
                    
                    return response.json();
                },

                async loadStats() {
                    this.stats = await this.apiCall('/stats');
                },

                async loadStores() {
                    this.stores = await this.apiCall('/stores');
                },

                async loadParts() {
                    this.parts = await this.apiCall('/parts');
                },

                async loadInventory() {
                    this.inventory = await this.apiCall('/inventory');
                    this.filteredInventory = this.inventory;
                    // Apply current filters after loading
                    this.filterInventory();
                },

                async loadWorkOrders() {
                    this.workOrders = await this.apiCall('/work-orders');
                },

                async loadUsers() {
                    if (this.currentUser?.role === 'admin') {
                        this.users = await this.apiCall('/users');
                    }
                },

                // Filtering - FIXED SEARCH FUNCTION
                filterInventory() {
                    console.log('🔍 Filtering with searchTerm:', this.searchTerm, 'storeFilter:', this.storeFilter);
                    
                    let filtered = [...this.inventory]; // Create a copy
                    
                    if (this.searchTerm && this.searchTerm.trim() !== '') {
                        const term = this.searchTerm.toLowerCase().trim();
                        console.log('✅ Applying search filter:', term);
                        filtered = filtered.filter(item => 
                            item.part_number.toLowerCase().includes(term) ||
                            item.description.toLowerCase().includes(term) ||
                            item.store_name.toLowerCase().includes(term)
                        );
                    }
                    
                    if (this.storeFilter && this.storeFilter !== '') {
                        <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management - MVP</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.13.0/cdn.js" defer></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
        }
        
        .login-container {
            max-width: 400px;
            margin: 5rem auto;
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .login-form h2 {
            margin-bottom: 1.5rem;
            text-align: center;
        }
        
        .header {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }
        
        .user-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .stat-card {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #007bff;
        }
        
        .controls {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }
        
        .control-row {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }
        
        input[type="text"], input[type="email"], input[type="password"], input[type="number"], select {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .search-box {
            flex: 1;
            min-width: 200px;
        }
        
        .btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .btn:hover {
            background: #0056b3;
        }
        
        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
        }
        
        .btn-success {
            background: #28a745;
        }
        
        .btn-success:hover {
            background: #1e7e34;
        }
        
        .btn-warning {
            background: #ffc107;
            color: #000;
        }
        
        .inventory-table {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background: #f8f9fa;
            font-weight: 600;
        }
        
        tbody tr:hover {
            background: #f8f9fa;
        }
        
        .store-tag {
            padding: 0.2rem 0.5rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .store-central {
            background: #e3f2fd;
            color: #1976d2;
        }
        
        .store-customer_site {
            background: #f3e5f5;
            color: #7b1fa2;
        }
        
        .store-engineer {
            background: #e8f5e8;
            color: #388e3c;
        }
        
        .store-mine {
            background: #fff3e0;
            color: #f57c00;
            border: 2px solid #ff9800;
        }
        
        .wo-tag {
            background: #f0f0f0;
            padding: 0.1rem 0.3rem;
            border-radius: 4px;
            font-size: 0.75rem;
        }
        
        .low-stock {
            background: #ffebee;
            color: #c62828;
            font-weight: bold;
        }
        
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        
        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .form-group input, .form-group select {
            width: 100%;
        }
        
        .loading {
            text-align: center;
            padding: 2rem;
            color: #666;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }
        
        .success {
            background: #d4edda;
            color: #155724;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }
        
        .demo-credentials {
            background: #e7f3ff;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 0.5rem;
            }
            
            table {
                font-size: 0.9rem;
            }
            
            th, td {
                padding: 0.5rem;
            }
            
            .control-row {
                flex-direction: column;
                align-items: stretch;
            }
            
            .search-box {
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <div x-data="inventoryApp()" x-init="checkAuth()">
        <!-- Login Screen -->
        <div x-show="!isAuthenticated" class="login-container">
            <form @submit.prevent="login()" class="login-form">
                <h2>Inventory Management</h2>
                
                <div class="demo-credentials">
                    <strong>Demo Credentials:</strong><br>
                    Engineer: john@company.com / password123<br>
                    Admin: admin@company.com / admin123
                </div>
                
                <div x-show="error" class="error" x-text="error"></div>
                
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" x-model="loginForm.email" required>
                </div>
                
                <div class="form-group">
                    <label>Password</label>
                    <input type="password" x-model="loginForm.password" required>
                </div>
                
                <button type="submit" class="btn" style="width: 100%;" :disabled="loading">
                    <span x-show="!loading">Login</span>
                    <span x-show="loading">Logging in...</span>
                </button>
            </form>
        </div>

        <!-- Main App -->
        <div x-show="isAuthenticated" class="container">
            <!-- Header -->
            <div class="header">
                <div class="user-info">
                    <div>
                        <h1>Inventory Management</h1>
                        <p>Welcome back, <strong x-text="currentUser.name"></strong> (<span x-text="currentUser.role"></span>)</p>
                    </div>
                    <button class="btn" @click="logout()">Logout</button>
                </div>
            </div>

            <!-- Loading State -->
            <div x-show="loading" class="loading">
                <div>Loading inventory data...</div>
            </div>

            <!-- Quick Stats -->
            <div x-show="!loading" class="stats">
                <div class="stat-card">
                    <div class="stat-number" x-text="stats.total_parts"></div>
                    <div>Total Parts</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" x-text="stats.total_stores"></div>
                    <div>Active Stores</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" x-text="stats.low_stock"></div>
                    <div>Low Stock Alerts</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" x-text="stats.my_parts"></div>
                    <div>My Parts</div>
                </div>
            </div>

            <!-- Controls -->
            <div x-show="!loading" class="controls">
                <div class="control-row">
                    <input type="text" 
                           placeholder="Search parts..." 
                           class="search-box"
                           x-model="searchTerm"
                           @input="filterInventory()"
                           @keyup="filterInventory()">
                    
                    <select x-model="storeFilter" @change="filterInventory()">
                        <option value="">All Stores</option>
                        <template x-for="store in stores" :key="store.id">
                            <option :value="store.id" x-text="store.name"></option>
                        </template>
                    </select>
                    
                    <button class="btn btn-success" @click="showAddModal = true">Add Stock</button>
                    <button class="btn" @click="exportCSV()">Export CSV</button>
                    <button x-show="currentUser.role === 'admin'" class="btn" @click="showUsersPanel = !showUsersPanel">
                        <span x-text="showUsersPanel ? 'Hide Users' : 'Manage Users'"></span>
                    </button>
                </div>
                
                <div x-show="error" class="error" x-text="error"></div>
                <div x-show="successMessage" class="success" x-text="successMessage"></div>
            </div>

            <!-- User Management Panel (Admin Only) -->
            <div x-show="!loading && showUsersPanel && currentUser.role === 'admin'" class="inventory-table" style="margin-bottom: 1.5rem;">
                <div style="padding: 1rem; background: #f8f9fa; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="margin: 0;">User Management</h3>
                    <button class="btn btn-success" 
                            @click="editingUser = null; userForm = { email: '', name: '', password: '', role: 'engineer', territory: '' }; showUserModal = true">
                        Add User
                    </button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Territory</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="user in users" :key="user.id">
                            <tr>
                                <td x-text="user.name"></td>
                                <td x-text="user.email"></td>
                                <td>
                                    <span class="wo-tag" x-text="user.role"></span>
                                </td>
                                <td x-text="user.territory || 'N/A'"></td>
                                <td>
                                    <button class="btn btn-sm" @click="editUser(user)">Edit</button>
                                    <button class="btn btn-sm" 
                                            style="background: #dc3545; color: white;"
                                            x-show="user.id !== currentUser.id"
                                            @click="deleteUser(user.id, user.name)">Delete</button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>

            <!-- Inventory Table -->
            <div x-show="!loading" class="inventory-table">
                <table>
                    <thead>
                        <tr>
                            <th>Part Number</th>
                            <th>Description</th>
                            <th>Store</th>
                            <th>Quantity</th>
                            <th>Work Order</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="item in filteredInventory" :key="item.id">
                            <tr :class="item.quantity <= item.min_threshold ? 'low-stock' : ''">
                                <td x-text="item.part_number"></td>
                                <td x-text="item.description"></td>
                                <td>
                                    <span class="store-tag" 
                                          :class="getStoreClass(item.store_type, item.store_owner)"
                                          x-text="item.store_name">
                                    </span>
                                </td>
                                <td>
                                    <strong x-text="item.quantity"></strong>
                                    <span x-show="item.quantity <= item.min_threshold">⚠️</span>
                                </td>
                                <td>
                                    <span x-show="item.work_order" 
                                          class="wo-tag" 
                                          x-text="item.work_order">
                                    </span>
                                    <span x-show="!item.work_order" class="wo-tag">Original</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm" 
                                            x-show="canEdit(item.store_owner, item.store_type)"
                                            @click="editItem(item)">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-warning" 
                                            x-show="canEdit(item.store_owner, item.store_type)"
                                            @click="transferItem(item)">
                                        Transfer
                                    </button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
                
                <div x-show="filteredInventory.length === 0" style="padding: 2rem; text-align: center; color: #666;">
                    