<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management - MVP</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/3.13.0/cdn.js" defer></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
        }
        
        .login-container {
            max-width: 400px;
            margin: 5rem auto;
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .login-form h2 {
            margin-bottom: 1.5rem;
            text-align: center;
        }
        
        .header {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }
        
        .user-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .stat-card {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #007bff;
        }
        
        .controls {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }
        
        .control-row {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }
        
        input[type="text"], input[type="email"], input[type="password"], input[type="number"], select {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .search-box {
            flex: 1;
            min-width: 200px;
        }
        
        .btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        
        .btn:hover {
            background: #0056b3;
        }
        
        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
        }
        
        .btn-success {
            background: #28a745;
        }
        
        .btn-success:hover {
            background: #1e7e34;
        }
        
        .btn-warning {
            background: #ffc107;
            color: #000;
        }
        
        .inventory-table {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background: #f8f9fa;
            font-weight: 600;
        }
        
        tbody tr:hover {
            background: #f8f9fa;
        }
        
        .store-tag {
            padding: 0.2rem 0.5rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .store-central {
            background: #e3f2fd;
            color: #1976d2;
        }
        
        .store-customer_site {
            background: #f3e5f5;
            color: #7b1fa2;
        }
        
        .store-engineer {
            background: #e8f5e8;
            color: #388e3c;
        }
        
        .store-mine {
            background: #fff3e0;
            color: #f57c00;
            border: 2px solid #ff9800;
        }
        
        .wo-tag {
            background: #f0f0f0;
            padding: 0.1rem 0.3rem;
            border-radius: 4px;
            font-size: 0.75rem;
        }
        
        .low-stock {
            background: #ffebee;
            color: #c62828;
            font-weight: bold;
        }
        
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        
        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .form-group input, .form-group select {
            width: 100%;
        }
        
        .loading {
            text-align: center;
            padding: 2rem;
            color: #666;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }
        
        .success {
            background: #d4edda;
            color: #155724;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }
        
        .demo-credentials {
            background: #e7f3ff;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 0.5rem;
            }
            
            table {
                font-size: 0.9rem;
            }
            
            th, td {
                padding: 0.5rem;
            }
            
            .control-row {
                flex-direction: column;
                align-items: stretch;
            }
            
            .search-box {
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <div x-data="inventoryApp()" x-init="checkAuth()">
        <!-- Login Screen -->
        <div x-show="!isAuthenticated" class="login-container">
            <form @submit.prevent="login()" class="login-form">
                <h2>Inventory Management</h2>
                
                <div class="demo-credentials">
                    <strong>Demo Credentials:</strong><br>
                    Engineer: john@company.com / password123<br>
                    Admin: admin@company.com / admin123
                </div>
                
                <div x-show="error" class="error" x-text="error"></div>
                
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" x-model="loginForm.email" required>
                </div>
                
                <div class="form-group">
                    <label>Password</label>
                    <input type="password" x-model="loginForm.password" required>
                </div>
                
                <button type="submit" class="btn" style="width: 100%;" :disabled="loading">
                    <span x-show="!loading">Login</span>
                    <span x-show="loading">Logging in...</span>
                </button>
            </form>
        </div>

        <!-- Main App -->
        <div x-show="isAuthenticated" class="container">
            <!-- Header -->
            <div class="header">
                <div class="user-info">
                    <div>
                        <h1>Inventory Management</h1>
                        <p>Welcome back, <strong x-text="currentUser.name"></strong> (<span x-text="currentUser.role"></span>)</p>
                    </div>
                    <button class="btn" @click="logout()">Logout</button>
                </div>
            </div>

            <!-- Loading State -->
            <div x-show="loading" class="loading">
                <div>Loading inventory data...</div>
            </div>

            <!-- Quick Stats -->
            <div x-show="!loading" class="stats">
                <div class="stat-card">
                    <div class="stat-number" x-text="stats.total_parts"></div>
                    <div>Total Parts</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" x-text="stats.total_stores"></div>
                    <div>Active Stores</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" x-text="stats.low_stock"></div>
                    <div>Low Stock Alerts</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" x-text="stats.my_parts"></div>
                    <div>My Parts</div>
                </div>
            </div>

            <!-- Controls -->
            <div x-show="!loading" class="controls">
                <div class="control-row">
                    <input type="text" 
                           placeholder="Search parts..." 
                           class="search-box"
                           x-model="searchTerm"
                           @input="console.log('Search input:', searchTerm); filterInventory()"
                           @keyup="console.log('Search keyup:', searchTerm); filterInventory()">
                    
                    <select x-model="storeFilter" @change="filterInventory()">
                        <option value="">All Stores</option>
                        <template x-for="store in stores" :key="store.id">
                            <option :value="store.id" x-text="store.name"></option>
                        </template>
                    </select>
                    
                    <button class="btn btn-success" @click="showAddModal = true">Add Stock</button>
                    <button class="btn" @click="exportCSV()">Export CSV</button>
                    <button x-show="currentUser.role === 'admin'" class="btn" @click="showUsersPanel = !showUsersPanel">
                        <span x-text="showUsersPanel ? 'Hide Users' : 'Manage Users'"></span>
                    </button>
                    <button x-show="currentUser.role === 'admin'" class="btn" @click="showStoresPanel = !showStoresPanel">
                        <span x-text="showStoresPanel ? 'Hide Stores' : 'Manage Stores'"></span>
                    </button>
                    <button x-show="currentUser.role === 'admin'" class="btn" @click="showPartsPanel = !showPartsPanel">
                        <span x-text="showPartsPanel ? 'Hide Parts' : 'Manage Parts'"></span>
                    </button>
                    <button class="btn" @click="showMovementsPanel = !showMovementsPanel; if(showMovementsPanel) loadMovements()">
                        <span x-text="showMovementsPanel ? 'Hide History' : 'Movement History'"></span>
                    </button>
                </div>
                
                <div x-show="error" class="error" x-text="error"></div>
                <div x-show="successMessage" class="success" x-text="successMessage"></div>
            </div>

            <!-- User Management Panel (Admin Only) -->
            <div x-show="!loading && showUsersPanel && currentUser.role === 'admin'" class="inventory-table" style="margin-bottom: 1.5rem;">
                <div style="padding: 1rem; background: #f8f9fa; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="margin: 0;">User Management</h3>
                    <button class="btn btn-success" 
                            @click="editingUser = null; userForm = { email: '', name: '', password: '', role: 'engineer', territory: '' }; showUserModal = true">
                        Add User
                    </button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Territory</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="user in users" :key="user.id">
                            <tr>
                                <td x-text="user.name"></td>
                                <td x-text="user.email"></td>
                                <td>
                                    <span class="wo-tag" x-text="user.role"></span>
                                </td>
                                <td x-text="user.territory || 'N/A'"></td>
                                <td>
                                    <button class="btn btn-sm" @click="editUser(user)">Edit</button>
                                    <button class="btn btn-sm" 
                                            style="background: #dc3545; color: white;"
                                            x-show="user.id !== currentUser.id"
                                            @click="deleteUser(user.id, user.name)">Delete</button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>

            <!-- Store Management Panel (Admin Only) -->
            <div x-show="!loading && showStoresPanel && currentUser.role === 'admin'" class="inventory-table" style="margin-bottom: 1.5rem;">
                <div style="padding: 1rem; background: #f8f9fa; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="margin: 0;">Store Management</h3>
                    <button class="btn btn-success" 
                            @click="editingStore = null; storeForm = { name: '', type: 'customer_site', location: '', assigned_user_id: '' }; showStoreModal = true">
                        Add Store
                    </button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Location</th>
                            <th>Assigned To</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="store in stores" :key="store.id">
                            <tr>
                                <td x-text="store.name"></td>
                                <td>
                                    <span class="wo-tag" x-text="store.type"></span>
                                </td>
                                <td x-text="store.location || 'N/A'"></td>
                                <td x-text="getUserName(store.assigned_user_id)"></td>
                                <td>
                                    <button class="btn btn-sm" @click="editStore(store)">Edit</button>
                                    <button class="btn btn-sm" 
                                            style="background: #dc3545; color: white;"
                                            @click="deleteStore(store.id, store.name)">Delete</button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>

            <!-- Parts Management Panel (Admin Only) -->
            <div x-show="!loading && showPartsPanel && currentUser.role === 'admin'" class="inventory-table" style="margin-bottom: 1.5rem;">
                <div style="padding: 1rem; background: #f8f9fa; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="margin: 0;">Parts Management</h3>
                    <button class="btn btn-success" 
                            @click="editingPart = null; partForm = { part_number: '', description: '', category: '', unit_cost: '' }; showPartModal = true">
                        Add Part
                    </button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Part Number</th>
                            <th>Description</th>
                            <th>Category</th>
                            <th>Unit Cost</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="part in parts" :key="part.id">
                            <tr>
                                <td><strong x-text="part.part_number"></strong></td>
                                <td x-text="part.description"></td>
                                <td>
                                    <span class="wo-tag" x-text="part.category"></span>
                                </td>
                                <td x-text="'
            <div x-show="!loading && showUsersPanel && currentUser.role === 'admin'" class="inventory-table" style="margin-bottom: 1.5rem;">
                <div style="padding: 1rem; background: #f8f9fa; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="margin: 0;">User Management</h3>
                    <button class="btn btn-success" 
                            @click="editingUser = null; userForm = { email: '', name: '', password: '', role: 'engineer', territory: '' }; showUserModal = true">
                        Add User
                    </button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Territory</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="user in users" :key="user.id">
                            <tr>
                                <td x-text="user.name"></td>
                                <td x-text="user.email"></td>
                                <td>
                                    <span class="wo-tag" x-text="user.role"></span>
                                </td>
                                <td x-text="user.territory || 'N/A'"></td>
                                <td>
                                    <button class="btn btn-sm" @click="editUser(user)">Edit</button>
                                    <button class="btn btn-sm" 
                                            style="background: #dc3545; color: white;"
                                            x-show="user.id !== currentUser.id"
                                            @click="deleteUser(user.id, user.name)">Delete</button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>

            <!-- Inventory Table -->
            <div x-show="!loading" class="inventory-table">
                <table>
                    <thead>
                        <tr>
                            <th>Part Number</th>
                            <th>Description</th>
                            <th>Store</th>
                            <th>Quantity</th>
                            <th>Work Order</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="item in filteredInventory" :key="item.id">
                            <tr :class="item.quantity <= item.min_threshold ? 'low-stock' : ''">
                                <td x-text="item.part_number"></td>
                                <td x-text="item.description"></td>
                                <td>
                                    <span class="store-tag" 
                                          :class="getStoreClass(item.store_type, item.store_owner)"
                                          x-text="item.store_name">
                                    </span>
                                </td>
                                <td>
                                    <strong x-text="item.quantity"></strong>
                                    <span x-show="item.quantity <= item.min_threshold">⚠️</span>
                                </td>
                                <td>
                                    <span x-show="item.work_order" 
                                          class="wo-tag" 
                                          x-text="item.work_order">
                                    </span>
                                    <span x-show="!item.work_order" class="wo-tag">Original</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm" 
                                            x-show="canEdit(item.store_owner, item.store_type)"
                                            @click="editItem(item)">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-warning" 
                                            x-show="canEdit(item.store_owner, item.store_type)"
                                            @click="transferItem(item)">
                                        Transfer
                                    </button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
                
                <div x-show="filteredInventory.length === 0" style="padding: 2rem; text-align: center; color: #666;">
                    No inventory found matching your search criteria.
                </div>
            </div>

            <!-- Add Stock Modal -->
            <div x-show="showAddModal" class="modal" @click.outside="showAddModal = false">
                <div class="modal-content">
                    <h3>Add Stock</h3>
                    <form @submit.prevent="addStock()">
                        <div class="form-group">
                            <label>Part</label>
                            <select x-model="addForm.part_id" required>
                                <option value="">Select Part</option>
                                <template x-for="part in parts" :key="part.id">
                                    <option :value="part.id" x-text="part.part_number + ' - ' + part.description"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Store</label>
                            <select x-model="addForm.store_id" required>
                                <option value="">Select Store</option>
                                <template x-for="store in editableStores" :key="store.id">
                                    <option :value="store.id" x-text="store.name"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Quantity</label>
                            <input type="number" x-model="addForm.quantity" min="1" required>
                        </div>
                        <div class="form-group">
                            <label>Work Order (leave blank for original stock)</label>
                            <input type="text" x-model="addForm.work_order_number" placeholder="WO-2024-001">
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showAddModal = false">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="addingStock">
                                <span x-show="!addingStock">Add Stock</span>
                                <span x-show="addingStock">Adding...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Edit Stock Modal -->
            <div x-show="showEditModal" class="modal" @click.outside="showEditModal = false">
                <div class="modal-content">
                    <h3>Edit Stock Quantity</h3>
                    <form @submit.prevent="updateStock()">
                        <div class="form-group">
                            <label>New Quantity</label>
                            <input type="number" x-model="editForm.new_quantity" min="0" required>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showEditModal = false">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading">Update</span>
                                <span x-show="loading">Updating...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Transfer Stock Modal -->
            <div x-show="showTransferModal" class="modal" @click.outside="showTransferModal = false">
                <div class="modal-content">
                    <h3>Transfer Stock</h3>
                    <form @submit.prevent="transferStock()">
                        <div class="form-group">
                            <label>Destination Store</label>
                            <select x-model="transferForm.to_store_id" required>
                                <option value="">Select Store</option>
                                <template x-for="store in editableStores" :key="store.id">
                                    <option :value="store.id" x-text="store.name"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Quantity to Transfer</label>
                            <input type="number" x-model="transferForm.quantity" min="1" required>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showTransferModal = false">Cancel</button>
                            <button type="submit" class="btn btn-warning" :disabled="loading">
                                <span x-show="!loading">Transfer</span>
                                <span x-show="loading">Transferring...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- User Management Modal -->
            <div x-show="showUserModal" class="modal" @click.outside="showUserModal = false">
                <div class="modal-content">
                    <h3 x-text="editingUser ? 'Edit User' : 'Create New User'"></h3>
                    <form @submit.prevent="editingUser ? updateUser() : createUser()">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" x-model="userForm.email" required :disabled="!!editingUser">
                        </div>
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" x-model="userForm.name" required>
                        </div>
                        <div class="form-group">
                            <label x-text="editingUser ? 'New Password (leave blank to keep current)' : 'Password'"></label>
                            <input type="password" x-model="userForm.password" :required="!editingUser">
                        </div>
                        <div class="form-group">
                            <label>Role</label>
                            <select x-model="userForm.role" required>
                                <option value="engineer">Engineer</option>
                                <option value="admin">Admin</option>
                                <option value="manager">Manager</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Territory</label>
                            <input type="text" x-model="userForm.territory" placeholder="Optional">
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showUserModal = false; editingUser = null;">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading" x-text="editingUser ? 'Update User' : 'Create User'"></span>
                                <span x-show="loading" x-text="editingUser ? 'Updating...' : 'Creating...'"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Store Management Modal -->
            <div x-show="showStoreModal" class="modal" @click.outside="showStoreModal = false">
                <div class="modal-content">
                    <h3 x-text="editingStore ? 'Edit Store' : 'Create New Store'"></h3>
                    <form @submit.prevent="editingStore ? updateStore() : createStore()">
                        <div class="form-group">
                            <label>Store Name</label>
                            <input type="text" x-model="storeForm.name" required>
                        </div>
                        <div class="form-group">
                            <label>Type</label>
                            <select x-model="storeForm.type" required>
                                <option value="central">Central Warehouse</option>
                                <option value="customer_site">Customer Site</option>
                                <option value="engineer">Engineer Personal</option>
                                <option value="fe_consignment">FE Consignment</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Location</label>
                            <input type="text" x-model="storeForm.location" placeholder="Optional">
                        </div>
                        <div class="form-group">
                            <label>Assigned To</label>
                            <select x-model="storeForm.assigned_user_id">
                                <option value="">None</option>
                                <template x-for="user in users" :key="user.id">
                                    <option :value="user.id" x-text="user.name"></option>
                                </template>
                            </select>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showStoreModal = false; editingStore = null;">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading" x-text="editingStore ? 'Update Store' : 'Create Store'"></span>
                                <span x-show="!loading" x-text="editingStore ? 'Updating...' : 'Creating...'"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Part Management Modal -->
            <div x-show="showPartModal" class="modal" @click.outside="showPartModal = false">
                <div class="modal-content">
                    <h3 x-text="editingPart ? 'Edit Part' : 'Create New Part'"></h3>
                    <form @submit.prevent="editingPart ? updatePart() : createPart()">
                        <div class="form-group">
                            <label>Part Number</label>
                            <input type="text" x-model="partForm.part_number" required>
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <input type="text" x-model="partForm.description" required>
                        </div>
                        <div class="form-group">
                            <label>Category</label>
                            <input type="text" x-model="partForm.category" required>
                        </div>
                        <div class="form-group">
                            <label>Unit Cost ($)</label>
                            <input type="number" step="0.01" x-model="partForm.unit_cost" required>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showPartModal = false; editingPart = null;">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading" x-text="editingPart ? 'Update Part' : 'Create Part'"></span>
                                <span x-show="loading" x-text="editingPart ? 'Updating...' : 'Creating...'"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

        </div>
            <div x-show="showUserModal" class="modal" @click.outside="showUserModal = false">
                <div class="modal-content">
                    <h3 x-text="editingUser ? 'Edit User' : 'Create New User'"></h3>
                    <form @submit.prevent="editingUser ? updateUser() : createUser()">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" x-model="userForm.email" required :disabled="!!editingUser">
                        </div>
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" x-model="userForm.name" required>
                        </div>
                        <div class="form-group">
                            <label x-text="editingUser ? 'New Password (leave blank to keep current)' : 'Password'"></label>
                            <input type="password" x-model="userForm.password" :required="!editingUser">
                        </div>
                        <div class="form-group">
                            <label>Role</label>
                            <select x-model="userForm.role" required>
                                <option value="engineer">Engineer</option>
                                <option value="admin">Admin</option>
                                <option value="manager">Manager</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Territory</label>
                            <input type="text" x-model="userForm.territory" placeholder="Optional">
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showUserModal = false; editingUser = null;">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading" x-text="editingUser ? 'Update User' : 'Create User'"></span>
                                <span x-show="loading" x-text="editingUser ? 'Updating...' : 'Creating...'"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </div>

    <script>
        function inventoryApp() {
            return {
                isAuthenticated: false,
                currentUser: null,
                token: null,
                loading: false,
                addingStock: false,
                error: '',
                successMessage: '',
                
                loginForm: {
                    email: 'john@company.com',
                    password: 'password123'
                },
                
                addForm: {
                    part_id: '',
                    store_id: '',
                    quantity: '',
                    work_order_number: ''
                },
                
                editForm: {
                    inventory_id: '',
                    new_quantity: ''
                },
                
                transferForm: {
                    inventory_id: '',
                    to_store_id: '',
                    quantity: ''
                },
                
                userForm: {
                    email: '',
                    name: '',
                    password: '',
                    role: 'engineer',
                    territory: ''
                },
                
                storeForm: {
                    name: '',
                    type: 'customer_site',
                    location: '',
                    assigned_user_id: ''
                },
                
                partForm: {
                    part_number: '',
                    description: '',
                    category: '',
                    unit_cost: ''
                },
                
                searchTerm: '',
                storeFilter: '',
                showAddModal: false,
                showEditModal: false,
                showTransferModal: false,
                showUserModal: false,
                showStoreModal: false,
                showPartModal: false,
                showUsersPanel: false,
                showStoresPanel: false,
                showPartsPanel: false,
                showMovementsPanel: false,
                editingUser: null,
                editingStore: null,
                editingPart: null,
                
                stats: {},
                stores: [],
                parts: [],
                inventory: [],
                workOrders: [],
                users: [],
                movements: [],
                filteredInventory: [],

                apiUrl: '/api',

                async checkAuth() {
                    this.token = localStorage.getItem('token');
                    if (this.token) {
                        try {
                            await this.getCurrentUser();
                            this.isAuthenticated = true;
                            await this.loadAllData();
                        } catch (error) {
                            localStorage.removeItem('token');
                            this.token = null;
                        }
                    }
                },

                async login() {
                    this.loading = true;
                    this.error = '';
                    
                    try {
                        const response = await fetch(`${this.apiUrl}/auth/login`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(this.loginForm)
                        });
                        
                        if (!response.ok) {
                            throw new Error('Invalid credentials');
                        }
                        
                        const data = await response.json();
                        this.token = data.access_token;
                        this.currentUser = data.user;
                        localStorage.setItem('token', this.token);
                        this.isAuthenticated = true;
                        
                        await this.loadAllData();
                        
                    } catch (error) {
                        this.error = error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async getCurrentUser() {
                    const response = await fetch(`${this.apiUrl}/me`, {
                        headers: {
                            'Authorization': `Bearer ${this.token}`
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Authentication failed');
                    }
                    
                    this.currentUser = await response.json();
                },

                logout() {
                    localStorage.removeItem('token');
                    this.token = null;
                    this.currentUser = null;
                    this.isAuthenticated = false;
                },

                async loadAllData() {
                    this.loading = true;
                    try {
                        const promises = [
                            this.loadStats(),
                            this.loadStores(),
                            this.loadParts(),
                            this.loadInventory()
                        ];
                        
                        if (this.currentUser?.role === 'admin') {
                            promises.push(this.loadUsers());
                        }
                        
                        await Promise.all(promises);
                    } catch (error) {
                        this.error = 'Failed to load data: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async apiCall(endpoint, options = {}) {
                    const response = await fetch(`${this.apiUrl}${endpoint}`, {
                        headers: {
                            'Authorization': `Bearer ${this.token}`,
                            'Content-Type': 'application/json',
                            ...options.headers
                        },
                        ...options
                    });
                    
                    if (!response.ok) {
                        throw new Error(`API error: ${response.status}`);
                    }
                    
                    return response.json();
                },

                async loadStats() {
                    this.stats = await this.apiCall('/stats');
                },

                async loadStores() {
                    this.stores = await this.apiCall('/stores');
                },

                async loadParts() {
                    this.parts = await this.apiCall('/parts');
                },

                async loadInventory() {
                    this.inventory = await this.apiCall('/inventory');
                    this.filteredInventory = this.inventory;
                },

                async loadUsers() {
                    if (this.currentUser?.role === 'admin') {
                        this.users = await this.apiCall('/users');
                    }
                },

                async loadMovements() {
                    this.movements = await this.apiCall('/movements');
                },

                // FIXED SEARCH FUNCTION - Back to working version
                filterInventory() {
                    let filtered = this.inventory;
                    
                    if (this.searchTerm) {
                        const term = this.searchTerm.toLowerCase();
                        filtered = filtered.filter(item => 
                            item.part_number.toLowerCase().includes(term) ||
                            item.description.toLowerCase().includes(term) ||
                            item.store_name.toLowerCase().includes(term)
                        );
                    }
                    
                    if (this.storeFilter) {
                        const storeId = parseInt(this.storeFilter);
                        const storeName = this.stores.find(s => s.id === storeId)?.name;
                        filtered = filtered.filter(item => item.store_name === storeName);
                    }
                    
                    this.filteredInventory = filtered;
                },

                getStoreClass(storeType, storeOwner) {
                    if (storeOwner === this.currentUser.id) return 'store-mine';
                    return 'store-' + storeType;
                },

                canEdit(storeOwner, storeType) {
                    if (this.currentUser.role === 'admin') return true;
                    return storeOwner === this.currentUser.id || storeType === 'central';
                },

                get editableStores() {
                    if (this.currentUser?.role === 'admin') return this.stores;
                    return this.stores.filter(store => 
                        store.assigned_user_id === this.currentUser.id || 
                        store.type === 'central'
                    );
                },

                async addStock() {
                    this.addingStock = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/inventory/add', {
                            method: 'POST',
                            body: JSON.stringify({
                                part_id: parseInt(this.addForm.part_id),
                                store_id: parseInt(this.addForm.store_id),
                                quantity: parseInt(this.addForm.quantity),
                                work_order_number: this.addForm.work_order_number || null
                            })
                        });
                        
                        this.successMessage = 'Stock added successfully!';
                        this.showAddModal = false;
                        this.addForm = { part_id: '', store_id: '', quantity: '', work_order_number: '' };
                        
                        await this.loadAllData();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to add stock: ' + error.message;
                    } finally {
                        this.addingStock = false;
                    }
                },

                async editItem(item) {
                    this.editForm.inventory_id = item.id;
                    this.editForm.new_quantity = item.quantity;
                    this.showEditModal = true;
                },

                async updateStock() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/inventory/update', {
                            method: 'PUT',
                            body: JSON.stringify({
                                inventory_id: parseInt(this.editForm.inventory_id),
                                new_quantity: parseInt(this.editForm.new_quantity)
                            })
                        });
                        
                        this.successMessage = 'Stock updated successfully!';
                        this.showEditModal = false;
                        this.editForm = { inventory_id: '', new_quantity: '' };
                        
                        await this.loadAllData();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to update stock: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async transferItem(item) {
                    this.transferForm.inventory_id = item.id;
                    this.transferForm.quantity = 1;
                    this.transferForm.to_store_id = '';
                    this.showTransferModal = true;
                },

                async transferStock() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/inventory/transfer', {
                            method: 'POST',
                            body: JSON.stringify({
                                inventory_id: parseInt(this.transferForm.inventory_id),
                                to_store_id: parseInt(this.transferForm.to_store_id),
                                quantity: parseInt(this.transferForm.quantity)
                            })
                        });
                        
                        this.successMessage = 'Stock transferred successfully!';
                        this.showTransferModal = false;
                        this.transferForm = { inventory_id: '', to_store_id: '', quantity: '' };
                        
                        await this.loadAllData();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to transfer stock: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async createUser() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/users', {
                            method: 'POST',
                            body: JSON.stringify(this.userForm)
                        });
                        
                        this.successMessage = 'User created successfully!';
                        this.showUserModal = false;
                        this.userForm = { email: '', name: '', password: '', role: 'engineer', territory: '' };
                        
                        await this.loadUsers();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to create user: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                editUser(user) {
                    this.editingUser = user.id;
                    this.userForm = {
                        email: user.email,
                        name: user.name,
                        password: '',
                        role: user.role,
                        territory: user.territory || ''
                    };
                    this.showUserModal = true;
                },

                async updateUser() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        const updateData = {
                            name: this.userForm.name,
                            role: this.userForm.role,
                            territory: this.userForm.territory || null
                        };
                        
                        if (this.userForm.password) {
                            updateData.password = this.userForm.password;
                        }
                        
                        await this.apiCall(`/users/${this.editingUser}`, {
                            method: 'PUT',
                            body: JSON.stringify(updateData)
                        });
                        
                        this.successMessage = 'User updated successfully!';
                        this.showUserModal = false;
                        this.editingUser = null;
                        this.userForm = { email: '', name: '', password: '', role: 'engineer', territory: '' };
                        
                        await this.loadUsers();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to update user: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async deleteUser(userId, userName) {
                    if (!confirm(`Are you sure you want to delete user ${userName}?`)) {
                        return;
                    }
                    
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall(`/users/${userId}`, {
                            method: 'DELETE'
                        });
                        
                        this.successMessage = 'User deleted successfully!';
                        await this.loadUsers();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to delete user: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                // Store management
                async createStore() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/stores', {
                            method: 'POST',
                            body: JSON.stringify({
                                name: this.storeForm.name,
                                type: this.storeForm.type,
                                location: this.storeForm.location || null,
                                assigned_user_id: this.storeForm.assigned_user_id ? parseInt(this.storeForm.assigned_user_id) : null
                            })
                        });
                        
                        this.successMessage = 'Store created successfully!';
                        this.showStoreModal = false;
                        this.storeForm = { name: '', type: 'customer_site', location: '', assigned_user_id: '' };
                        
                        await this.loadStores();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to create store: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                editStore(store) {
                    this.editingStore = store.id;
                    this.storeForm = {
                        name: store.name,
                        type: store.type,
                        location: store.location || '',
                        assigned_user_id: store.assigned_user_id || ''
                    };
                    this.showStoreModal = true;
                },

                async updateStore() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall(`/stores/${this.editingStore}`, {
                            method: 'PUT',
                            body: JSON.stringify({
                                name: this.storeForm.name,
                                type: this.storeForm.type,
                                location: this.storeForm.location || null,
                                assigned_user_id: this.storeForm.assigned_user_id ? parseInt(this.storeForm.assigned_user_id) : null
                            })
                        });
                        
                        this.successMessage = 'Store updated successfully!';
                        this.showStoreModal = false;
                        this.editingStore = null;
                        this.storeForm = { name: '', type: 'customer_site', location: '', assigned_user_id: '' };
                        
                        await this.loadStores();
                        await this.loadInventory();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to update store: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async deleteStore(storeId, storeName) {
                    if (!confirm(`Are you sure you want to delete store ${storeName}?`)) {
                        return;
                    }
                    
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall(`/stores/${storeId}`, {
                            method: 'DELETE'
                        });
                        
                        this.successMessage = 'Store deleted successfully!';
                        await this.loadStores();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to delete store: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                // Parts management
                async createPart() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/parts', {
                            method: 'POST',
                            body: JSON.stringify({
                                part_number: this.partForm.part_number,
                                description: this.partForm.description,
                                category: this.partForm.category,
                                unit_cost: parseFloat(this.partForm.unit_cost)
                            })
                        });
                        
                        this.successMessage = 'Part created successfully!';
                        this.showPartModal = false;
                        this.partForm = { part_number: '', description: '', category: '', unit_cost: '' };
                        
                        await this.loadParts();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to create part: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                editPart(part) {
                    this.editingPart = part.id;
                    this.partForm = {
                        part_number: part.part_number,
                        description: part.description,
                        category: part.category,
                        unit_cost: part.unit_cost
                    };
                    this.showPartModal = true;
                },

                async updatePart() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall(`/parts/${this.editingPart}`, {
                            method: 'PUT',
                            body: JSON.stringify({
                                part_number: this.partForm.part_number,
                                description: this.partForm.description,
                                category: this.partForm.category,
                                unit_cost: parseFloat(this.partForm.unit_cost)
                            })
                        });
                        
                        this.successMessage = 'Part updated successfully!';
                        this.showPartModal = false;
                        this.editingPart = null;
                        this.partForm = { part_number: '', description: '', category: '', unit_cost: '' };
                        
                        await this.loadParts();
                        await this.loadInventory();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to update part: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async deletePart(partId, partNumber) {
                    if (!confirm(`Are you sure you want to delete part ${partNumber}?`)) {
                        return;
                    }
                    
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall(`/parts/${partId}`, {
                            method: 'DELETE'
                        });
                        
                        this.successMessage = 'Part deleted successfully!';
                        await this.loadParts();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to delete part: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                // Helper function
                getUserName(userId) {
                    if (!userId) return 'Unassigned';
                    const user = this.users.find(u => u.id === userId);
                    return user ? user.name : 'Unknown';
                },

                exportCSV() {
                    const headers = ['Part Number', 'Description', 'Store', 'Quantity', 'Work Order'];
                    const rows = this.filteredInventory.map(item => [
                        item.part_number,
                        item.description,
                        item.store_name,
                        item.quantity,
                        item.work_order || 'Original'
                    ]);
                    
                    const csvContent = [headers, ...rows].map(row => row.join(',')).join('\n');
                    const blob = new Blob([csvContent], { type: 'text/csv' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'inventory_export.csv';
                    a.click();
                }
            }
        }
    </script>
</body>
</html> + part.unit_cost.toFixed(2)"></td>
                                <td>
                                    <button class="btn btn-sm" @click="editPart(part)">Edit</button>
                                    <button class="btn btn-sm" 
                                            style="background: #dc3545; color: white;"
                                            @click="deletePart(part.id, part.part_number)">Delete</button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>

            <!-- Movement History Panel -->
            <div x-show="!loading && showMovementsPanel" class="inventory-table" style="margin-bottom: 1.5rem;">
                <div style="padding: 1rem; background: #f8f9fa; border-bottom: 1px solid #ddd;">
                    <h3 style="margin: 0;">Movement History (Last 100)</h3>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Date/Time</th>
                            <th>Type</th>
                            <th>Part</th>
                            <th>Qty</th>
                            <th>From</th>
                            <th>To</th>
                            <th>WO#</th>
                            <th>By</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="movement in movements" :key="movement.id">
                            <tr>
                                <td x-text="new Date(movement.created_at).toLocaleString()"></td>
                                <td>
                                    <span class="wo-tag" x-text="movement.movement_type"></span>
                                </td>
                                <td x-text="movement.part_number"></td>
                                <td><strong x-text="movement.quantity"></strong></td>
                                <td x-text="movement.from_store_name || '-'"></td>
                                <td x-text="movement.to_store_name || '-'"></td>
                                <td x-text="movement.work_order || '-'"></td>
                                <td x-text="movement.created_by_name"></td>
                            </tr>
                        </template>
                    </tbody>
                </table>
                <div x-show="movements.length === 0" style="padding: 2rem; text-align: center; color: #666;">
                    No movement history found.
                </div>
            </div>

            <!-- Inventory Table -->
            <div x-show="!loading && showUsersPanel && currentUser.role === 'admin'" class="inventory-table" style="margin-bottom: 1.5rem;">
                <div style="padding: 1rem; background: #f8f9fa; border-bottom: 1px solid #ddd; display: flex; justify-content: space-between; align-items: center;">
                    <h3 style="margin: 0;">User Management</h3>
                    <button class="btn btn-success" 
                            @click="editingUser = null; userForm = { email: '', name: '', password: '', role: 'engineer', territory: '' }; showUserModal = true">
                        Add User
                    </button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Territory</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="user in users" :key="user.id">
                            <tr>
                                <td x-text="user.name"></td>
                                <td x-text="user.email"></td>
                                <td>
                                    <span class="wo-tag" x-text="user.role"></span>
                                </td>
                                <td x-text="user.territory || 'N/A'"></td>
                                <td>
                                    <button class="btn btn-sm" @click="editUser(user)">Edit</button>
                                    <button class="btn btn-sm" 
                                            style="background: #dc3545; color: white;"
                                            x-show="user.id !== currentUser.id"
                                            @click="deleteUser(user.id, user.name)">Delete</button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>

            <!-- Inventory Table -->
            <div x-show="!loading" class="inventory-table">
                <table>
                    <thead>
                        <tr>
                            <th>Part Number</th>
                            <th>Description</th>
                            <th>Store</th>
                            <th>Quantity</th>
                            <th>Work Order</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="item in filteredInventory" :key="item.id">
                            <tr :class="item.quantity <= item.min_threshold ? 'low-stock' : ''">
                                <td x-text="item.part_number"></td>
                                <td x-text="item.description"></td>
                                <td>
                                    <span class="store-tag" 
                                          :class="getStoreClass(item.store_type, item.store_owner)"
                                          x-text="item.store_name">
                                    </span>
                                </td>
                                <td>
                                    <strong x-text="item.quantity"></strong>
                                    <span x-show="item.quantity <= item.min_threshold">⚠️</span>
                                </td>
                                <td>
                                    <span x-show="item.work_order" 
                                          class="wo-tag" 
                                          x-text="item.work_order">
                                    </span>
                                    <span x-show="!item.work_order" class="wo-tag">Original</span>
                                </td>
                                <td>
                                    <button class="btn btn-sm" 
                                            x-show="canEdit(item.store_owner, item.store_type)"
                                            @click="editItem(item)">
                                        Edit
                                    </button>
                                    <button class="btn btn-sm btn-warning" 
                                            x-show="canEdit(item.store_owner, item.store_type)"
                                            @click="transferItem(item)">
                                        Transfer
                                    </button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
                
                <div x-show="filteredInventory.length === 0" style="padding: 2rem; text-align: center; color: #666;">
                    No inventory found matching your search criteria.
                </div>
            </div>

            <!-- Add Stock Modal -->
            <div x-show="showAddModal" class="modal" @click.outside="showAddModal = false">
                <div class="modal-content">
                    <h3>Add Stock</h3>
                    <form @submit.prevent="addStock()">
                        <div class="form-group">
                            <label>Part</label>
                            <select x-model="addForm.part_id" required>
                                <option value="">Select Part</option>
                                <template x-for="part in parts" :key="part.id">
                                    <option :value="part.id" x-text="part.part_number + ' - ' + part.description"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Store</label>
                            <select x-model="addForm.store_id" required>
                                <option value="">Select Store</option>
                                <template x-for="store in editableStores" :key="store.id">
                                    <option :value="store.id" x-text="store.name"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Quantity</label>
                            <input type="number" x-model="addForm.quantity" min="1" required>
                        </div>
                        <div class="form-group">
                            <label>Work Order (leave blank for original stock)</label>
                            <input type="text" x-model="addForm.work_order_number" placeholder="WO-2024-001">
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showAddModal = false">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="addingStock">
                                <span x-show="!addingStock">Add Stock</span>
                                <span x-show="addingStock">Adding...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Edit Stock Modal -->
            <div x-show="showEditModal" class="modal" @click.outside="showEditModal = false">
                <div class="modal-content">
                    <h3>Edit Stock Quantity</h3>
                    <form @submit.prevent="updateStock()">
                        <div class="form-group">
                            <label>New Quantity</label>
                            <input type="number" x-model="editForm.new_quantity" min="0" required>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showEditModal = false">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading">Update</span>
                                <span x-show="loading">Updating...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Transfer Stock Modal -->
            <div x-show="showTransferModal" class="modal" @click.outside="showTransferModal = false">
                <div class="modal-content">
                    <h3>Transfer Stock</h3>
                    <form @submit.prevent="transferStock()">
                        <div class="form-group">
                            <label>Destination Store</label>
                            <select x-model="transferForm.to_store_id" required>
                                <option value="">Select Store</option>
                                <template x-for="store in editableStores" :key="store.id">
                                    <option :value="store.id" x-text="store.name"></option>
                                </template>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Quantity to Transfer</label>
                            <input type="number" x-model="transferForm.quantity" min="1" required>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showTransferModal = false">Cancel</button>
                            <button type="submit" class="btn btn-warning" :disabled="loading">
                                <span x-show="!loading">Transfer</span>
                                <span x-show="loading">Transferring...</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- User Management Modal -->
            <div x-show="showUserModal" class="modal" @click.outside="showUserModal = false">
                <div class="modal-content">
                    <h3 x-text="editingUser ? 'Edit User' : 'Create New User'"></h3>
                    <form @submit.prevent="editingUser ? updateUser() : createUser()">
                        <div class="form-group">
                            <label>Email</label>
                            <input type="email" x-model="userForm.email" required :disabled="!!editingUser">
                        </div>
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" x-model="userForm.name" required>
                        </div>
                        <div class="form-group">
                            <label x-text="editingUser ? 'New Password (leave blank to keep current)' : 'Password'"></label>
                            <input type="password" x-model="userForm.password" :required="!editingUser">
                        </div>
                        <div class="form-group">
                            <label>Role</label>
                            <select x-model="userForm.role" required>
                                <option value="engineer">Engineer</option>
                                <option value="admin">Admin</option>
                                <option value="manager">Manager</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Territory</label>
                            <input type="text" x-model="userForm.territory" placeholder="Optional">
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn" @click="showUserModal = false; editingUser = null;">Cancel</button>
                            <button type="submit" class="btn btn-success" :disabled="loading">
                                <span x-show="!loading" x-text="editingUser ? 'Update User' : 'Create User'"></span>
                                <span x-show="loading" x-text="editingUser ? 'Updating...' : 'Creating...'"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </div>

    <script>
        function inventoryApp() {
            return {
                isAuthenticated: false,
                currentUser: null,
                token: null,
                loading: false,
                addingStock: false,
                error: '',
                successMessage: '',
                
                loginForm: {
                    email: 'john@company.com',
                    password: 'password123'
                },
                
                addForm: {
                    part_id: '',
                    store_id: '',
                    quantity: '',
                    work_order_number: ''
                },
                
                editForm: {
                    inventory_id: '',
                    new_quantity: ''
                },
                
                transferForm: {
                    inventory_id: '',
                    to_store_id: '',
                    quantity: ''
                },
                
                userForm: {
                    email: '',
                    name: '',
                    password: '',
                    role: 'engineer',
                    territory: ''
                },
                
                searchTerm: '',
                storeFilter: '',
                showAddModal: false,
                showEditModal: false,
                showTransferModal: false,
                showUserModal: false,
                showUsersPanel: false,
                editingUser: null,
                
                stats: {},
                stores: [],
                parts: [],
                inventory: [],
                workOrders: [],
                users: [],
                filteredInventory: [],

                apiUrl: '/api',

                async checkAuth() {
                    this.token = localStorage.getItem('token');
                    if (this.token) {
                        try {
                            await this.getCurrentUser();
                            this.isAuthenticated = true;
                            await this.loadAllData();
                        } catch (error) {
                            localStorage.removeItem('token');
                            this.token = null;
                        }
                    }
                },

                async login() {
                    this.loading = true;
                    this.error = '';
                    
                    try {
                        const response = await fetch(`${this.apiUrl}/auth/login`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(this.loginForm)
                        });
                        
                        if (!response.ok) {
                            throw new Error('Invalid credentials');
                        }
                        
                        const data = await response.json();
                        this.token = data.access_token;
                        this.currentUser = data.user;
                        localStorage.setItem('token', this.token);
                        this.isAuthenticated = true;
                        
                        await this.loadAllData();
                        
                    } catch (error) {
                        this.error = error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async getCurrentUser() {
                    const response = await fetch(`${this.apiUrl}/me`, {
                        headers: {
                            'Authorization': `Bearer ${this.token}`
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Authentication failed');
                    }
                    
                    this.currentUser = await response.json();
                },

                logout() {
                    localStorage.removeItem('token');
                    this.token = null;
                    this.currentUser = null;
                    this.isAuthenticated = false;
                },

                async loadAllData() {
                    this.loading = true;
                    try {
                        const promises = [
                            this.loadStats(),
                            this.loadStores(),
                            this.loadParts(),
                            this.loadInventory()
                        ];
                        
                        if (this.currentUser?.role === 'admin') {
                            promises.push(this.loadUsers());
                        }
                        
                        await Promise.all(promises);
                    } catch (error) {
                        this.error = 'Failed to load data: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async apiCall(endpoint, options = {}) {
                    const response = await fetch(`${this.apiUrl}${endpoint}`, {
                        headers: {
                            'Authorization': `Bearer ${this.token}`,
                            'Content-Type': 'application/json',
                            ...options.headers
                        },
                        ...options
                    });
                    
                    if (!response.ok) {
                        throw new Error(`API error: ${response.status}`);
                    }
                    
                    return response.json();
                },

                async loadStats() {
                    this.stats = await this.apiCall('/stats');
                },

                async loadStores() {
                    this.stores = await this.apiCall('/stores');
                },

                async loadParts() {
                    this.parts = await this.apiCall('/parts');
                },

                async loadInventory() {
                    this.inventory = await this.apiCall('/inventory');
                    this.filteredInventory = this.inventory;
                },

                async loadUsers() {
                    if (this.currentUser?.role === 'admin') {
                        this.users = await this.apiCall('/users');
                    }
                },

                // FIXED SEARCH FUNCTION - Back to working version
                filterInventory() {
                    let filtered = this.inventory;
                    
                    if (this.searchTerm) {
                        const term = this.searchTerm.toLowerCase();
                        filtered = filtered.filter(item => 
                            item.part_number.toLowerCase().includes(term) ||
                            item.description.toLowerCase().includes(term) ||
                            item.store_name.toLowerCase().includes(term)
                        );
                    }
                    
                    if (this.storeFilter) {
                        const storeId = parseInt(this.storeFilter);
                        const storeName = this.stores.find(s => s.id === storeId)?.name;
                        filtered = filtered.filter(item => item.store_name === storeName);
                    }
                    
                    this.filteredInventory = filtered;
                },

                getStoreClass(storeType, storeOwner) {
                    if (storeOwner === this.currentUser.id) return 'store-mine';
                    return 'store-' + storeType;
                },

                canEdit(storeOwner, storeType) {
                    if (this.currentUser.role === 'admin') return true;
                    return storeOwner === this.currentUser.id || storeType === 'central';
                },

                get editableStores() {
                    if (this.currentUser?.role === 'admin') return this.stores;
                    return this.stores.filter(store => 
                        store.assigned_user_id === this.currentUser.id || 
                        store.type === 'central'
                    );
                },

                async addStock() {
                    this.addingStock = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/inventory/add', {
                            method: 'POST',
                            body: JSON.stringify({
                                part_id: parseInt(this.addForm.part_id),
                                store_id: parseInt(this.addForm.store_id),
                                quantity: parseInt(this.addForm.quantity),
                                work_order_number: this.addForm.work_order_number || null
                            })
                        });
                        
                        this.successMessage = 'Stock added successfully!';
                        this.showAddModal = false;
                        this.addForm = { part_id: '', store_id: '', quantity: '', work_order_number: '' };
                        
                        await this.loadAllData();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to add stock: ' + error.message;
                    } finally {
                        this.addingStock = false;
                    }
                },

                async editItem(item) {
                    this.editForm.inventory_id = item.id;
                    this.editForm.new_quantity = item.quantity;
                    this.showEditModal = true;
                },

                async updateStock() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/inventory/update', {
                            method: 'PUT',
                            body: JSON.stringify({
                                inventory_id: parseInt(this.editForm.inventory_id),
                                new_quantity: parseInt(this.editForm.new_quantity)
                            })
                        });
                        
                        this.successMessage = 'Stock updated successfully!';
                        this.showEditModal = false;
                        this.editForm = { inventory_id: '', new_quantity: '' };
                        
                        await this.loadAllData();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to update stock: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async transferItem(item) {
                    this.transferForm.inventory_id = item.id;
                    this.transferForm.quantity = 1;
                    this.transferForm.to_store_id = '';
                    this.showTransferModal = true;
                },

                async transferStock() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/inventory/transfer', {
                            method: 'POST',
                            body: JSON.stringify({
                                inventory_id: parseInt(this.transferForm.inventory_id),
                                to_store_id: parseInt(this.transferForm.to_store_id),
                                quantity: parseInt(this.transferForm.quantity)
                            })
                        });
                        
                        this.successMessage = 'Stock transferred successfully!';
                        this.showTransferModal = false;
                        this.transferForm = { inventory_id: '', to_store_id: '', quantity: '' };
                        
                        await this.loadAllData();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to transfer stock: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async createUser() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall('/users', {
                            method: 'POST',
                            body: JSON.stringify(this.userForm)
                        });
                        
                        this.successMessage = 'User created successfully!';
                        this.showUserModal = false;
                        this.userForm = { email: '', name: '', password: '', role: 'engineer', territory: '' };
                        
                        await this.loadUsers();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to create user: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                editUser(user) {
                    this.editingUser = user.id;
                    this.userForm = {
                        email: user.email,
                        name: user.name,
                        password: '',
                        role: user.role,
                        territory: user.territory || ''
                    };
                    this.showUserModal = true;
                },

                async updateUser() {
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        const updateData = {
                            name: this.userForm.name,
                            role: this.userForm.role,
                            territory: this.userForm.territory || null
                        };
                        
                        if (this.userForm.password) {
                            updateData.password = this.userForm.password;
                        }
                        
                        await this.apiCall(`/users/${this.editingUser}`, {
                            method: 'PUT',
                            body: JSON.stringify(updateData)
                        });
                        
                        this.successMessage = 'User updated successfully!';
                        this.showUserModal = false;
                        this.editingUser = null;
                        this.userForm = { email: '', name: '', password: '', role: 'engineer', territory: '' };
                        
                        await this.loadUsers();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to update user: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                async deleteUser(userId, userName) {
                    if (!confirm(`Are you sure you want to delete user ${userName}?`)) {
                        return;
                    }
                    
                    this.loading = true;
                    this.error = '';
                    this.successMessage = '';
                    
                    try {
                        await this.apiCall(`/users/${userId}`, {
                            method: 'DELETE'
                        });
                        
                        this.successMessage = 'User deleted successfully!';
                        await this.loadUsers();
                        setTimeout(() => this.successMessage = '', 3000);
                        
                    } catch (error) {
                        this.error = 'Failed to delete user: ' + error.message;
                    } finally {
                        this.loading = false;
                    }
                },

                exportCSV() {
                    const headers = ['Part Number', 'Description', 'Store', 'Quantity', 'Work Order'];
                    const rows = this.filteredInventory.map(item => [
                        item.part_number,
                        item.description,
                        item.store_name,
                        item.quantity,
                        item.work_order || 'Original'
                    ]);
                    
                    const csvContent = [headers, ...rows].map(row => row.join(',')).join('\n');
                    const blob = new Blob([csvContent], { type: 'text/csv' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'inventory_export.csv';
                    a.click();
                }
            }
        }
    </script>
</body>
</html>